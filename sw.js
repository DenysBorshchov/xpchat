// XPchat Service Worker - –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
const CACHE_NAME = 'xpchat-v2.0';
const STATIC_CACHE = 'xpchat-static-v2.0';
const DYNAMIC_CACHE = 'xpchat-dynamic-v2.0';

// –§–∞–π–ª—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const STATIC_FILES = [
    '/',
    '/index.html',
    '/styles.css',
    '/script.js',
    '/pwa.js',
    '/manifest.json',
    '/sw.js',
    '/start.html',
    '/demo_calls.html',
    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css',
    'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/webfonts/fa-solid-900.woff2'
];

// –û—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü–∞
const OFFLINE_PAGE = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>XPchat - –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        .offline-container {
            text-align: center;
            max-width: 500px;
            padding: 40px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .offline-icon {
            font-size: 80px;
            margin-bottom: 20px;
            color: #ffd700;
        }
        h1 {
            margin-bottom: 20px;
            font-size: 28px;
        }
        p {
            margin-bottom: 30px;
            font-size: 16px;
            line-height: 1.6;
            opacity: 0.9;
        }
        .features {
            text-align: left;
            margin: 30px 0;
            padding: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
        }
        .features h3 {
            margin-bottom: 15px;
            color: #ffd700;
        }
        .features ul {
            list-style: none;
            padding: 0;
        }
        .features li {
            margin: 10px 0;
            padding: 8px 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }
        .features li:before {
            content: "‚úÖ ";
            margin-right: 10px;
        }
        .retry-btn {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 12px 24px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            margin: 10px;
        }
        .retry-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
        .status {
            margin-top: 20px;
            padding: 10px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="offline-container">
        <div class="offline-icon">üì±</div>
        <h1>XPchat —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ñ–ª–∞–π–Ω!</h1>
        <p>–£ –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–æ XPchat –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ.</p>
        
        <div class="features">
            <h3>üåê –ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –æ—Ñ–ª–∞–π–Ω:</h3>
            <ul>
                <li>–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π</li>
                <li>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤</li>
                <li>–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)</li>
                <li>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</li>
                <li>AI –ø–æ–º–æ—â–Ω–∏–∫ (–±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)</li>
            </ul>
        </div>
        
        <button class="retry-btn" onclick="window.location.reload()">üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞</button>
        <button class="retry-btn" onclick="checkConnection()">üì° –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</button>
        
        <div class="status" id="status">
            –°—Ç–∞—Ç—É—Å: –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
        </div>
    </div>
    
    <script>
        function checkConnection() {
            const status = document.getElementById('status');
            if (navigator.onLine) {
                status.innerHTML = '–°—Ç–∞—Ç—É—Å: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...';
                status.style.background = 'rgba(40, 167, 69, 0.3)';
                setTimeout(() => window.location.reload(), 2000);
            } else {
                status.innerHTML = '–°—Ç–∞—Ç—É—Å: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                status.style.background = 'rgba(220, 53, 69, 0.3)';
            }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        setInterval(checkConnection, 5000);
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        window.addEventListener('online', () => {
            document.getElementById('status').innerHTML = '–°—Ç–∞—Ç—É—Å: –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...';
            setTimeout(() => window.location.reload(), 2000);
        });
        
        window.addEventListener('offline', () => {
            document.getElementById('status').innerHTML = '–°—Ç–∞—Ç—É—Å: –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω';
        });
    </script>
</body>
</html>
`;

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
    console.log('XPchat SW: –£—Å—Ç–∞–Ω–æ–≤–∫–∞...');
    
    event.waitUntil(
        caches.open(STATIC_CACHE)
            .then((cache) => {
                console.log('XPchat SW: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...');
                return cache.addAll(STATIC_FILES);
            })
            .then(() => {
                console.log('XPchat SW: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã');
                return self.skipWaiting();
            })
            .catch((error) => {
                console.error('XPchat SW: –û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
            })
    );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
    console.log('XPchat SW: –ê–∫—Ç–∏–≤–∞—Ü–∏—è...');
    
    event.waitUntil(
        caches.keys()
            .then((cacheNames) => {
                return Promise.all(
                    cacheNames.map((cacheName) => {
                        if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
                            console.log('XPchat SW: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞:', cacheName);
                            return caches.delete(cacheName);
                        }
                    })
                );
            })
            .then(() => {
                console.log('XPchat SW: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
                return self.clients.claim();
            })
    );
});

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', (event) => {
    const { request } = event;
    const url = new URL(request.url);
    
    // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (request.method === 'GET') {
        // –î–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü - Network First, –∑–∞—Ç–µ–º –∫—ç—à
        if (request.destination === 'document') {
            event.respondWith(
                fetch(request)
                    .then((response) => {
                        // –ö–ª–æ–Ω–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                        const responseClone = response.clone();
                        caches.open(DYNAMIC_CACHE)
                            .then((cache) => cache.put(request, responseClone));
                        return response;
                    })
                    .catch(() => {
                        // –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        return new Response(OFFLINE_PAGE, {
                            headers: { 'Content-Type': 'text/html' }
                        });
                    })
            );
        }
        // –î–ª—è CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - Cache First, –∑–∞—Ç–µ–º —Å–µ—Ç—å
        else if (request.destination === 'style' || 
                 request.destination === 'script' || 
                 request.destination === 'image') {
            event.respondWith(
                caches.match(request)
                    .then((response) => {
                        return response || fetch(request)
                            .then((fetchResponse) => {
                                // –ö—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å
                                const responseClone = fetchResponse.clone();
                                caches.open(DYNAMIC_CACHE)
                                    .then((cache) => cache.put(request, responseClone));
                                return fetchResponse;
                            });
                    })
            );
        }
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - Network First
        else {
            event.respondWith(
                fetch(request)
                    .then((response) => {
                        // –ö—ç—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                        if (response.status === 200) {
                            const responseClone = response.clone();
                            caches.open(DYNAMIC_CACHE)
                                .then((cache) => cache.put(request, responseClone));
                        }
                        return response;
                    })
                    .catch(() => {
                        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –∫—ç—à–µ
                        return caches.match(request);
                    })
            );
        }
    }
});

// –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
self.addEventListener('sync', (event) => {
    console.log('XPchat SW: –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è:', event.tag);
    
    if (event.tag === 'background-sync') {
        event.waitUntil(
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            console.log('XPchat SW: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...')
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
self.addEventListener('push', (event) => {
    console.log('XPchat SW: Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ');
    
    const options = {
        body: event.data ? event.data.text() : '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ XPchat!',
        icon: '/icons/icon-192x192.png',
        badge: '/icons/icon-72x72.png',
        vibrate: [100, 50, 100],
        data: {
            dateOfArrival: Date.now(),
            primaryKey: 1
        },
        actions: [
            {
                action: 'open',
                title: '–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç',
                icon: '/icons/icon-72x72.png'
            },
            {
                action: 'close',
                title: '–ó–∞–∫—Ä—ã—Ç—å',
                icon: '/icons/icon-72x72.png'
            }
        ]
    };
    
    event.waitUntil(
        self.registration.showNotification('XPchat', options)
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º
self.addEventListener('notificationclick', (event) => {
    console.log('XPchat SW: –ö–ª–∏–∫ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é:', event.action);
    
    event.notification.close();
    
    if (event.action === 'open') {
        event.waitUntil(
            clients.openWindow('/')
        );
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
self.addEventListener('message', (event) => {
    console.log('XPchat SW: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', event.data);
    
    if (event.data && event.data.type === 'SKIP_WAITING') {
        self.skipWaiting();
    }
    
    if (event.data && event.data.type === 'GET_VERSION') {
        event.ports[0].postMessage({ version: CACHE_NAME });
    }
});

console.log('XPchat Service Worker –∑–∞–≥—Ä—É–∂–µ–Ω!');
